{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","winnerGame","e","s","state","count","target","getAttribute","replace","i","line","winningBid","square","setState","player1","winner","Array","fill","player2","setTimeout","removeClass","includes","goGame","scr","data","classList","add","newGames","document","querySelectorAll","forEach","item","remove","className","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcdff8f6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      square: Array(9).fill(null),\n      count: 0,\n      player1: 0,\n      player2: 0,\n      winner: \"\"\n    }\n    this.winningBid = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ]\n  }\n  winnerGame = (e) => {\n    let s = (this.state.count % 2 === 0 ? e.target.getAttribute(\"class\").replace(\"squares \", \"\") : e.target.getAttribute(\"class\").replace(\"squares \", \"\"));\n\n    for (let i = 0; i < 8; i++) {\n      let line = this.winningBid[i];\n      if (this.state.square[line[0]] === s\n        && this.state.square[line[1]] === s\n        && this.state.square[line[2]] === s) {\n\n        if (s === \"dagger\") {\n          this.setState({\n            player1: this.state.player1 + 1,\n            winner: `Player 1:Winner winner chicken dinner!`,\n            square: Array(9).fill(null),\n            count: 0,\n          })\n        } else {\n          this.setState({\n            player2: this.state.player2 + 1,\n            winner: `Player 2:Winner winner chicken dinner!`,\n            square: Array(9).fill(null),\n            count: 0,\n          })\n        }\n        setTimeout(() => {\n          this.setState({\n            square: Array(9).fill(null),\n            count: 0,\n            winner: \"\"\n          })\n          this.removeClass();\n        }, 2500)\n\n      } else if (!this.state.square.includes(null)) {\n        this.setState({ winner: \"Ничья!\" })\n\n        setTimeout(() => {\n          this.setState({\n            square: Array(9).fill(null),\n            count: 0,\n            winner: \"\"\n\n          });\n          this.removeClass();\n        }, 2500);\n\n        return true;\n      };\n    }\n  }\n  goGame = e => {\n    let scr = this.state.square;\n    let data = e.target.getAttribute(\"data\");\n    if (scr[data] === null) {\n\n      if (this.state.count % 2 === 0) {\n        scr[data] = \"dagger\";\n        e.target.classList.add(\"dagger\");\n      } else {\n        scr[data] = \"circle\";\n        e.target.classList.add(\"circle\")\n      }\n      this.setState({ count: this.state.count + 1 })\n      this.setState({ square: scr })\n    }\n    this.winnerGame(e);\n  }\n  newGames = () => {\n    this.setState({\n      square: Array(9).fill(null),\n      count: 0,\n      player1: 0,\n      player2: 0\n    })\n    this.removeClass();\n  }\n\n  removeClass = () => {\n    document.querySelectorAll(\".squares\").forEach(item => item.classList.remove(\"dagger\", \"circle\"))\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"gameSquares\">\n          <h3 className=\"winClose\">{this.state.winner}</h3>\n\n          <div onClick={this.goGame} className=\"squares\" data=\"0\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"1\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"2\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"3\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"4\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"5\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"6\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"7\"></div>\n          <div onClick={this.goGame} className=\"squares\" data=\"8\"></div>\n\n        </div>\n\n        <div className=\"players\">\n          <h1>Player 1: {this.state.player1}</h1>\n          <h1>Player 2: {this.state.player2}</h1>\n\n          <button className=\"buttonNewGame\" onClick={this.newGames}>new game</button>\n        </div>\n\n\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}